{"version":3,"sources":["serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]}